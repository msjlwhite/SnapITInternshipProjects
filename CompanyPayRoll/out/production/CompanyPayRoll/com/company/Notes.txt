///*
//Author: J White
//Date: 4/3/2019
//Task: Company Payroll App -- Create a fake company
//-Give company 3 different Employees (manager, cashier, accountant)
//-Use Employee as an abstract class
//-All employees will have String name, int employeeId, double salary
//-Manager is full-time employee, cashier is part-time, accountant is contract
//-As a user, I want the ability to add, update, and delete employees to the fake company, calculate each employee's salary and income taxes.
//-Use your own discretion on each employees hourly rate which, along with income taxes, will determine their salary
//-Create a design based on these requirements (doesn't have to be super detailed), create a Trello ticket ("Employee Design - <your name>"), and post them there
//-Ask any questions you might have!
//
//*/

/*
Updated Specs as of 4/4/2019
Scanner flow should be something like this:
If Cashier
Employee name:
Employee Id:
Employee Type:
Hourly Rate:
Hours Worked:
(Upon hitting enter, this should display employee's info *see attached screenshot)

If Manager
Employee name:
Employee Id:
Employee Type:
Annual Salary:
(Upon hitting enter, this should display employee's info *see attached screenshot)
*/


//
//package com.company;
//
//public class Company {
//    private String name;
//
//    // Abstraction
//    // Encapsulation
//    // Inheritance
//    // Polymorphism
//
//
//    // Create a super Employee class -- Abstraction
//    public abstract class Employee {
//
//        public String name;             // hold employee's name
//        public int employeeID;          // holds the employee's work ID
//        private double salary;          // holds employee's salary
//        // private paymentPerHour:      // ???
//
//    }// end of ABSTRACT CLASS for Employee
//
//    public void Employee(String name, int employeeID, double salary) {
//
//        super();
//        this.name = name;
//        this.employeeID = employeeID;
//        this.salary = salary;
//    }
//} // end of company class

//package com.company;
//
////import com.company.Company;
//import com.company.Company.Employee;
//
//public class Manager {
//
//    // keyword extends - acts as a form of inheritance
//    // syntax for class extending another class
////    public class Manager extends Company.Employee(String name, int employeeID, double salary){
////    public class Manager extends Employee(String name, int employeeID, double salary){
////        this.name = name;
////        this.employeeID = employeeID;
////        this.salary = salary;
////        //this.paymentPerHour = paymentPerHour;
////    } // end of extends [Employee] Manager() Method
//
//
//    //
////    public extends Cashier(String name, int employeeID, double salary)//int paymentPerHour) {
////    {
////        this.name = name;
////        this.employeeID = employeeID;
////        this.salary = salary;
////        //this.paymentPerHour = paymentPerHour;
////    } // end of extends [Employee] Cashier() Method
//
//    //
////    public extends Accountant(String name, int employeeID, double salary)//int paymentPerHour) {
////    {
////        this.name = name;
////        this.employeeID = employeeID;
////        this.salary = salary;
////
////        //this.paymentPerHour = paymentPerHour;
////    } // end of extends [Employee] Accountant() Method
//}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    // checks to see if the information entered is correct or not -- TRY LATER WITH A WHILE LOOP AROUND ABOVE FUNCTION
    // LATER...
//
//    public void correct(){
//
//        System.out.println("");
//        System.out.print("Please verify that the above information is correct or not? (Y/N)");
//        ans = scanner.nextLine().toString().toUpperCase();
//
//        switch (ans)
//        {
//            case "y": restart.begin();
////            System.out.println("+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=");
////            System.out.println("");
//                break;
//            case "n":
////                System.out.println("");
//                cashierInfo();
//                break;
//            default:System.out.println("Thank you! Goodbye!");
//                break;
//
//        }// end of switch
//
//    }// end of correct() Method

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


//        System.out.print("Would you like to add another employee? (Y/N) ");
//        ans = scanner.nextLine().toString().toLowerCase();
//
//        do {
//            begin();
//        } while (ans != "n");

//        switch (ans)
//        {
//            case "y": System.out.println("Okurrr!!");
//            do {
//                begin();
//            } while (ans.toString() != "n");
//                break;
//            case "n": System.out.println("Thank you!");
//                break;
//                default:System.out.println("Thank you! Goodbye!");
//                break;
//        }
//
//        do {
//            begin();
//        } while !(ans.equals("n");

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        // will continue to run the program until the user enters an 'N' or 'n' or nothing
        System.out.print("");
        System.out.print("Does the above information look bee-lieveable? Y/N ");
        ans = scanner.nextLine().toString().toLowerCase();
        System.out.println("");

        while ((!ans.equals("n")) && (!ans.equals("")))
        {
            System.out.println("");
            cashierInfo();
        }//end of while loop

 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//        this.hoursWorked = hoursWorked;         // sets work hours to the user's input
//        this.totalSal = totalSal;               // sets total salary to the calculation to hold the employee's weekly pay

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

// double totalSal;                            // holds the result of the calculation, hourlySalary * hoursWorked
